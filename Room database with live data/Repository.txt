class ProductRepository constructor(application: Application) {

    val searchResults = MutableLiveData<List<Product>>()
    val allProducts: LiveData<List<Product>>?
    private var productDao: ProductDao?
    init {
        val db: ProductRoomDatabase? =
            ProductRoomDatabase.getDatabase(application)
        productDao = db?.productDao()
        allProducts = productDao?.getAllProducts()
    }
    fun asyncFinished(result: List<Product>){
        searchResults.value = result
    }
    fun findProduct(name: String) {
        val task = QueryAsyncTask(productDao)
        task.delegate = this
        task.execute(name)
    }
    fun insertProduct(newproduct: Product) {
        val task = InsertAsyncTask(productDao)
        task.execute(newproduct)
    }

    private class QueryAsyncTask constructor(val asyncTaskDao: ProductDao?): AsyncTask<String,Void, List<Product>>(){
        var delegate: ProductRepository? = null

        override fun doInBackground(vararg params: String?): List<Product>? {
            return asyncTaskDao?.findProduct(params[0].toString())
        }

        override fun onPostExecute(result: List<Product>) {
            delegate?.asyncFinished(result)
        }
    }

    private class InsertAsyncTask constructor(private val asyncTaskDao: ProductDao?) : AsyncTask<Product,
            Void, Void>() {
        override fun doInBackground(vararg params: Product): Void? {
            asyncTaskDao?.insertProduct(params[0])
            return null
        }
    }
}